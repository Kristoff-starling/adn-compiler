internal
{
    @consistency(strong) @combiner(sum) @persistence(true)
	cache: Map<string, string> 
}

fn init() {
    cache.set('bomb', 'bomb');
}


fn req(rpc_req) {
	match (cache.get(rpc_req.get('body'))) {
		Some(cachename) => {
            match (cachename) {
                'cached' => {
                    send(err('200'), APP);
                }
                _ => {
                    send(err('403'), APP);
                }
            };
		}
		None => {
			send(rpc_req, NET);
		}
	};
}

fn resp(rpc_resp) {
    key := rpc_resp.get('body');
	value := 'cached';
	cache.set(key, value);
	send(rpc_resp, APP);
}